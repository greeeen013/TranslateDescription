import pyodbc
from dotenv import load_dotenv
import os


def get_database_columns():
    """
    Naƒçte konfiguraci z .env souboru, p≈ôipoj√≠ se k datab√°zi
    a vr√°t√≠ seznam n√°zv≈Ø sloupc≈Ø z dan√© tabulky.

    Returns:
        list: Seznam n√°zv≈Ø sloupc≈Ø nebo None p≈ôi chybƒõ
    """
    # Naƒçten√≠ promƒõnn√Ωch z .env souboru
    load_dotenv()

    config = {
        'server': os.getenv('DB_SERVER'),
        'database': os.getenv('DB_DATABASE'),
        'table': os.getenv('DB_TABLE'),
        'username': os.getenv('DB_USERNAME'),
        'password': os.getenv('DB_PASSWORD')
    }

    # Ovƒõ≈ôen√≠, ≈æe v≈°echny promƒõnn√© byly naƒçteny
    for key, value in config.items():
        if value is None:
            print(f"‚ùå Chyba: V .env souboru chyb√≠ promƒõnn√° {key}")
            return None

    try:
        # Vytvo≈ôen√≠ connection stringu
        connection_string = (
            f"DRIVER={{ODBC Driver 17 for SQL Server}};"
            f"SERVER={config['server']};"
            f"DATABASE={config['database']};"
            f"UID={config['username']};"
            f"PWD={config['password']}"
        )

        # P≈ôipojen√≠ k datab√°zi
        conn = pyodbc.connect(connection_string)
        cursor = conn.cursor()

        # Z√≠sk√°n√≠ n√°zv≈Ø sloupc≈Ø
        cursor.execute(f"SELECT TOP 0 * FROM {config['table']}")
        columns = [column[0] for column in cursor.description]

        return columns

    except pyodbc.Error as e:
        print(f"‚ùå Datab√°zov√° chyba: {e}")
        return None
    finally:
        if 'conn' in locals():
            conn.close()




# P≈ô√≠klad pou≈æit√≠
if __name__ == "__main__":
    columns = get_database_columns()

    if columns:
        print(f"üìä N√°zvy sloupc≈Ø v tabulce {os.getenv('DB_TABLE')}:")
        for i, column in enumerate(columns, 1):
            print(f"{i}. {column}")
    else:
        print("Nepoda≈ôilo se z√≠skat sloupce z tabulky")